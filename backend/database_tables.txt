ALTER TABLE auth_user
ADD COLUMN is_vendedor BOOLEAN DEFAULT FALSE;

ALTER TABLE auth_user
ADD COLUMN is_gerente BOOLEAN DEFAULT FALSE;



CREATE TABLE Clientes (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    endereco VARCHAR(255),
    telefone VARCHAR(20),
    email VARCHAR(255) UNIQUE,
    gestor_id INTEGER,
    FOREIGN KEY (gestor_id) REFERENCES auth_user(id) ON DELETE SET NULL
);


-- Criação da tabela Produtos
CREATE TABLE Produtos (
    id SERIAL PRIMARY KEY,
    nome VARCHAR(255) NOT NULL,
    descricao TEXT,
    preco_compra DECIMAL(10, 2),
    foto varchar(255)
);


CREATE TABLE ProdutosPrecos (
    id SERIAL PRIMARY KEY,
    produto_id INTEGER NOT NULL,
    adm_id INTEGER NOT NULL,
    gestor_id INTEGER NOT NULL,
    vendedor_id INTEGER NOT NULL,
    percentual_adm DECIMAL(10, 2),
    percentual_gestor DECIMAL(10, 2),
    percentual_vendedor DECIMAL(10, 2),
    FOREIGN KEY (produto_id) REFERENCES produtos(id) ON DELETE CASCADE,
    FOREIGN KEY (adm_id) REFERENCES auth_user(id) ON DELETE SET NULL,
    FOREIGN KEY (gestor_id) REFERENCES auth_user(id) ON DELETE SET NULL,
    FOREIGN KEY (vendedor_id) REFERENCES auth_user(id) ON DELETE SET NULL
);


-- Criação da tabela Vendas
CREATE TABLE Vendas (
    id SERIAL PRIMARY KEY,
    data_venda TIMESTAMP NOT NULL DEFAULT NOW(),
    cliente_id INTEGER NOT NULL,
    CONSTRAINT fk_cliente
        FOREIGN KEY (cliente_id) 
        REFERENCES clientes(id) 
        ON DELETE CASCADE
);

-- Criação da tabela VendasItens
CREATE TABLE VendasItens (
    id SERIAL PRIMARY KEY,
    venda_id INTEGER NOT NULL,
    produto_id INTEGER NOT NULL,
    quantidade INTEGER NOT NULL,
    preco_unitario DECIMAL(10, 2) NOT NULL,
    CONSTRAINT fk_venda
        FOREIGN KEY (venda_id)
        REFERENCES Vendas(id) 
        ON DELETE CASCADE,
    CONSTRAINT fk_produto
        FOREIGN KEY (produto_id)
        REFERENCES Produtos(id)
        ON DELETE CASCADE
);





CREATE TABLE EstoqueExtrato (
    id SERIAL PRIMARY KEY,
    data TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    produto_id INT NOT NULL,
    tipo INT CHECK (tipo IN (1, 2)),  -- 1 = Entrada, 2 = Saída
    tipomov INT CHECK (tipomov IN (1, 2)),  -- 1 = CI, 2 = VENDA
    iddoc INT NOT NULL,
    FOREIGN KEY (produto_id) REFERENCES Produtos(id)
);

CREATE TABLE SaldoEstoque (
    id SERIAL PRIMARY KEY,
    produto_id INT NOT NULL,
    gestor_id INT NOT NULL,
    saldo DECIMAL(10, 2) NOT NULL DEFAULT 0.00,
    FOREIGN KEY (produto_id) REFERENCES Produtos(id),
    FOREIGN KEY (gestor_id) REFERENCES auth_user(id)
);


-- Adiciona a coluna trava_preco_adm
ALTER TABLE produtos
ADD COLUMN trava_preco_adm BOOLEAN DEFAULT FALSE;

-- Adiciona a coluna preco_fixo_adm
ALTER TABLE produtos
ADD COLUMN preco_fixo_adm NUMERIC(10, 2);


CREATE TABLE core_menuitem (
    id SERIAL PRIMARY KEY,
    label VARCHAR(50) NOT NULL,
    icon VARCHAR(50),
    to_url VARCHAR(100),
    father_id INTEGER,
    permission_id INTEGER NOT NULL
);

-- Índices para melhorar a busca nos campos father_id e permission_id
CREATE INDEX core_menuitem_father_id_idx ON core_menuitem (father_id);
CREATE INDEX core_menuitem_permission_id_idx ON core_menuitem (permission_id);

-- Chaves estrangeiras
ALTER TABLE core_menuitem
    ADD CONSTRAINT core_menuitem_father_id_fk
    FOREIGN KEY (father_id) REFERENCES core_menuitem(id);

ALTER TABLE core_menuitem
    ADD CONSTRAINT core_menuitem_permission_id_fk
    FOREIGN KEY (permission_id) REFERENCES auth_permission(id);

ADM VAI COLOCAR TAXA EM PORCENTAGEM DE LUCRO EM CIMA DO PRODUTO CADASTRADO E REPASSAR O VALOR PARA O GESTOR QUE VAI COLOCAR SEU LUCRO EM CIMA E REPASSAR PRO VENDEDOR